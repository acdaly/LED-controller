I created a user interface to control an analog LED light strip (controlling all the LED pixels at once, rather than determining color and brightness of each). I altered my term project goal halfway through, so the competitive analysis from the beginning is a bit different. In regard to this project, it seems that most LED controllers use a remote control, or are used to make patterns with a digital LED light strip. The arduino uses C++ code, so making a user interface in python is not traditional. I did not come across many projects that included a user interface.

In order to control the LEDs, I used an arduino. I chose an arduino rather than a raspberry pi because arduinos are more catered to LED lights. The setup of a raspberry pi requires (ideally) a monitor, ethernet port, installing various libraries, etc. The arduino is merely plugged into the computer so the code can be uploaded from there. The LED lights are easy to write to with an arduino using analogWrite(pinNumber of LED color, brightness). Because arduinos use C++ code, I used pyserial. My python code wrote to the arduino's serial port, and the arduino read the string of values written to it and relayed it to the LED lights.

The python code uses tkinter for the UI. I first designed 4 slider bars for each LED color. With these, the user can determine the color and brightness of each color and allow the LEDs to stay constant. There's a box to the right of it used to predict the approximate color of the LEDs. The brightness of each RGB LED is inputed into the rgb color string to create the color. The sliders are 250 * 2 pixels, so every two pixels account for 1 brightness. 

Underneath the sliders is a timeline, so the LED lights can fade to different colors and levels of brightness over time. The 4 mini RGBW boxes exist so the user can adjust individual lights. The color mixer box can be clicked so the user can see the color sample of the three colors together and place it into the timeline. Each color has a dictionary that contains the x:y points of the dots. Clicking the color mixer merely creates a value for all 4 dictionaries at a specific time/key. The fade function first converts these dictionaries from x: y points to seconds: brightness. The function loops through all the points in the dictionary. The slope from one dot to the next is taken to determine the amount the LED light brightness changes by. The value in time.sleep(value) is constant and determines how often the LED brightness should be changed. This value is multiplied by the slope to get how much the LED should be incremented by. After going through all the dictionaries and creating a new time:brightness one, the four colors will have the same amount of keys regardless of how many were originally plotted. The amount of keys are looped through and each RGBW is written to at the same time to get an even fade.

The time can be adjusted, merely adjusting the changing the time of the time:brightness dictionaries. In order to clear the timeline, the reset key can be clicked. This resets the dictionaries to only contain the first and last dot at the beginning and end of the timeline, both at 0 brightness. To repeat the cycle forever, loop can be clicked, putting in a while True loop so the cycle repeats.

I included instructions in the top right so the users can easily tell what each part of the UI does without too many labels.